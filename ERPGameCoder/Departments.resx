<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        sHLDDIUEAAAAAElFTkSuQmCC
</value>
  </data>
</root>